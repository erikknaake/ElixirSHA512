defmodule ElixirSha512Test do
  use ExUnit.Case
  doctest ElixirSha512

  test "padds the message" do
    assert ElixirSha512.padd(<<0b01100001, 0b01100010, 0b01100011>>) ==
             <<0b01100001, 0b01100010, 0b01100011, 1 :: 1, 0 :: 871, 0 :: 123, 24 :: 5>>

    assert ElixirSha512.padd(<<"abc">>) == <<"abc", 1 :: 1, 0 :: 871, 0 :: 123, 24 :: 5>>

    assert ElixirSha512.padd(<<0b01100001, 0b01100010, 0b01100011>>) ==
             <<"abc", 1 :: 1, 0 :: 871, 0 :: 123, 24 :: 5>>

    assert ElixirSha512.padd(<<"abc">>) ==
             <<0b01100001, 0b01100010, 0b01100011, 1 :: 1, 0 :: 871, 0 :: 123, 24 :: 5>>
  end

  test "rotate right" do
    assert ElixirSha512.rotateRight(
             0b0000000000000000000000000000000000000000000000000000000001010101,
             1
           ) == 0b1000000000000000000000000000000000000000000000000000000000101010
  end

  test "ch" do
    assert ElixirSha512.ch(0b00011100, 0b11001100, 0b11110000) == 0b11101100
  end

  test "maj" do
    assert ElixirSha512.maj(0b00011100, 0b11001100, 0b11110000) == 0b11011100
  end

  test "sum0" do
    assert ElixirSha512.sum0(0b1111000011110000111100001111000011110000111100001111000011110000) ==
             0b1101001011010010110100101101001011010010110100101101001011010010
  end

  test "sum1" do
    assert ElixirSha512.sum1(0b1111000011110000111100001111000011110000111100001111000011110000) ==
             0b1000011110000111100001111000011110000111100001111000011110000111
  end

  test "sigma0" do
    assert ElixirSha512.sigma0(0b1111000011110000111100001111000011110000111100001111000011110000) ==
             0b1000100101101001011010010110100101101001011010010110100101101001
  end

  test "sigma1" do
    assert ElixirSha512.sigma1(0b1111000011110000111100001111000011110000111100001111000011110000) ==
             0b1001101001011010010110100101101001011010010110100101101001011010
  end

    test "sha512" do
      assert ElixirSha512.sha512(<<"Hello">>) == <<0x3615F80C9D293ED7402687F94B22D58E529B8CC7916F8FAC7FDDF7FBD5AF4CF777D3D795A7A00A16BF7E7F3FB9561EE9BAAE480DA9FE7A18769E71886B03F315::512>>
    end

  test "binarylist to binary" do
    assert ElixirSha512.binaryListToBinary([<<20 :: 64>>, <<21 :: 64>>]) == <<20 :: 64, 21 :: 64>>
  end

  test "compress" do
    assert ElixirSha512.compress([4800678499904433735, 1, 2, 3, 4800678430077660744, 5, 6, 7]) ==
             <<
               4800678499904433735 :: 64,
               1 :: 64,
               2 :: 64,
               3 :: 64,
               4800678430077660744 :: 64,
               5 :: 64,
               6 :: 64,
               7 :: 64
             >>
  end

  test "append bits" do
    assert ElixirSha512.appendBits(1, <<2 :: 64>>) == <<2 :: 64, 1 :: 64>>
  end

    test "preprocess" do
      assert ElixirSha512.preprocess(<<0b01100001, 0b01100010, 0b01100011>>) == [[<<97,98,99,128,0,0,0,0>>,
               <<0,0,0,0,0,0,0,0>>,
               <<0,0,0,0,0,0,0,0>>,
               <<0,0,0,0,0,0,0,0>>,
               <<0,0,0,0,0,0,0,0>>,
               <<0,0,0,0,0,0,0,0>>,
               <<0,0,0,0,0,0,0,0>>,
               <<0,0,0,0,0,0,0,0>>,
               <<0,0,0,0,0,0,0,0>>,
               <<0,0,0,0,0,0,0,0>>,
               <<0,0,0,0,0,0,0,0>>,
               <<0,0,0,0,0,0,0,0>>,
               <<0,0,0,0,0,0,0,0>>,
               <<0,0,0,0,0,0,0,0>>,
               <<0,0,0,0,0,0,0,0>>,
               <<0,0,0,0,0,0,0,24>>]]
    end

  test "parse" do
    assert ElixirSha512.parse(<<100 :: 2048>>) == [
             [
               <<0 :: 64>>,
               <<0 :: 64>>,
               <<0 :: 64>>,
               <<0 :: 64>>,
               <<0 :: 64>>,
               <<0 :: 64>>,
               <<0 :: 64>>,
               <<0 :: 64>>,
               <<0 :: 64>>,
               <<0 :: 64>>,
               <<0 :: 64>>,
               <<0 :: 64>>,
               <<0 :: 64>>,
               <<0 :: 64>>,
               <<0 :: 64>>,
               <<0 :: 64>>
             ],
             [
               <<0 :: 64>>,
               <<0 :: 64>>,
               <<0 :: 64>>,
               <<0 :: 64>>,
               <<0 :: 64>>,
               <<0 :: 64>>,
               <<0 :: 64>>,
               <<0 :: 64>>,
               <<0 :: 64>>,
               <<0 :: 64>>,
               <<0 :: 64>>,
               <<0 :: 64>>,
               <<0 :: 64>>,
               <<0 :: 64>>,
               <<0 :: 64>>,
               <<100 :: 64>>
             ]
           ]
  end

  test "split to n byte blocks" do
    assert ElixirSha512.splitToNByteBlocks(<<0b11110000101010100000000011111111::32>>, 1) == [<<0b11110000>>, <<0b10101010>>, <<0b00000000>>, <<0b11111111>>]
    assert ElixirSha512.splitToNByteBlocks(<<0b11110000, 0b10101010, 0b00000000, 0b11111111>>, 2) == [<<0b11110000, 0b10101010>>, <<0b00000000, 0b11111111>>]
  end
end
